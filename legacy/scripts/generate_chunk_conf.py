#!/usr/bin/env python
from __future__ import (absolute_import, division,
                        print_function, unicode_literals)
from builtins import *

import argparse
import configparser
import re

# large enough number to accomodate chromosomes. Too lazy to get the actual numbers for both builds
CHR_MAX_SIZE="400000000"

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Generate config file for bgen splitting")
    parser.add_argument('file_location_conf', action='store', type=str, help='config for location of all bgen/vcf files by chromosome')
    parser.add_argument('splitfile', action='store', type=str, help='Predetermined split points (as generated by http://github.com/FINNGEN/chrsplit). Must be ordered byt chr and pos')
    parser.add_argument('outfile', action='store', type=str, help='output configuration file')
    parser.add_argument('--splitype', choices=["by_chrom","all_sep"], default="all_sep")
    parser.add_argument('-build37', action='store_true',
                        help='Don\'t use chr in chromosome names')
    
    args = parser.parse_args()
    conf = configparser.ConfigParser()
    conf.read( args.file_location_conf)

    chr_files = conf.items("files")
    fileconf = dict(map( lambda x: (x[0].lstrip("chr_").upper(),x[1]), chr_files ))
    chr_prefix ="chr"

    if( args.build37 ):
        chr_prefix =""

    last_line = []
    ## keep track of chromosomes we have seen in order to check file is in sorted order.
    seen_chroms = {}
    row_num=2
    ranges = []
    with open(args.outfile,'w') as out:
        with open(args.splitfile) as splits:
            prev = splits.readline().rstrip("\n").split()
            for line in splits:
                last_line = line.rstrip("\n").split()

                start = prev[1]
                prev_chr = prev[0].upper()
                chrom = last_line[0].upper()

                if not prev_chr in fileconf:
                    raise Exception("Bgen file not defined for chromosome {}. Add it in file_location_conf ".format(prev_chr) )

                bgen = fileconf[prev_chr]

                if chrom in seen_chroms  or (chr==prev_chr and start >= stop ):
                    raise Exception("Input splitfile is not in CHR POS order. Offending row {}".format(row_num) )

                if prev_chr!=chrom:
                    ## last chunk in chromosome. split beyond end of chromosome
                    stop = CHR_MAX_SIZE
                    seen_chroms[prev_chr]=True

                    if args.splitype =="by_chrom":
                        ranges.append( chr_prefix +prev_chr + ":" + start + "-" + stop )
                        out.write(fileconf[prev_chr] + "\t" + ",".join(ranges) + "\n")
                        ranges.clear()

                else:
                    stop = str(int(last_line[1])-1)
                    ranges.append(chr_prefix +prev_chr + ":" + start + "-" + stop)

                if args.splitype =="all_sep":
                    out.write( "\t".join([ bgen, chr_prefix+prev_chr, start, stop ]) + "\n" )


                prev = last_line
                row_num+=1

        if args.splitype == "all_sep":
            out.write("\t".join([fileconf[last_line[0]], chr_prefix + last_line[0], last_line[1], CHR_MAX_SIZE]) + "\n")
        else:
            ranges.append( chr_prefix + last_line[0].upper() + ":" + last_line[1] + "-" + CHR_MAX_SIZE )
            out.write( fileconf[last_line[0]] + "\t" +",".join(ranges) + "\n")


